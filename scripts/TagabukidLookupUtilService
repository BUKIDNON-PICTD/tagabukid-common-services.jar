import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;

class TagabukidLookupUtilService
{

	@PersistenceContext('tagabukid_hrmis')
	def emhrmis

	@PersistenceContext('main')
	def emmain

	@Env
	def env;

	@Service('QueryService') 
	def querySvc; 
	
	@ActiveDB(value='tagabukidcommon', em='tagabukid_hrmis')
	def emcommon;

	@ProxyMethod
	public def lookuphrmis( namedsql, params, pagingKeys) {
		if (! params) params = [:]
		params.searchtext = (params.searchtext && params.searchtext.trim().length() > 0 ? params.searchtext : '') + '%'
		
		def qry = emhrmis.sqlContext.createNamedQuery(namedsql)
		
		if (pagingKeys){
			qry.setPagingKeys(pagingKeys)
		}
		if (params._start != null){
			qry.setFirstResult( params._start )
			qry.setMaxResults(params._limit)
		}
		def filter = [filter:params?.filter];
		return qry.setParameters(params).setVars(filter).resultList 
	}

	@ProxyMethod
	public def lookupmain( namedsql, params, pagingKeys) {
		if (! params) params = [:]
		params.searchtext = (params.searchtext && params.searchtext.trim().length() > 0 ? params.searchtext : '') + '%'

		def qry = emmain.sqlContext.createNamedQuery(namedsql)
		// for (int i = 0; i< filters.size(); i++) {
  //           params.filters = filters[i]
  //           qry.setVars(params)
  			if(params.filter){
  				qry.setVars(params)
  			}
	        if (pagingKeys){
				qry.setPagingKeys(pagingKeys)
			}
			if (params._start != null){
				qry.setFirstResult( params._start )
				qry.setMaxResults(params._limit)
			}
		// }
		
		return qry.setParameters(params).resultList 
	}

		@ProxyMethod
	public def lookupmainsingle( namedsql, params, pagingKeys) {
		if (! params) params = [:]
		params.searchtext = (params.searchtext && params.searchtext.trim().length() > 0 ? params.searchtext : '') + '%'

		def qry = emmain.sqlContext.createNamedQuery(namedsql)
		// for (int i = 0; i< filters.size(); i++) {
  //           params.filters = filters[i]
  //           qry.setVars(params)
  			if(params.filter){
  				qry.setVars(params)
  			}
	        if (pagingKeys){
				qry.setPagingKeys(pagingKeys)
			}
			if (params._start != null){
				qry.setFirstResult( params._start )
				qry.setMaxResults(params._limit)
			}
		// }
		
		return qry.setParameters(params).singleResult 
	}

		@ProxyMethod
	public def lookuphrmissingle( namedsql, params, pagingKeys) {
		if (! params) params = [:]
		params.searchtext = (params.searchtext && params.searchtext.trim().length() > 0 ? params.searchtext : '') + '%'

		def qry = emhrmis.sqlContext.createNamedQuery(namedsql)
		// for (int i = 0; i< filters.size(); i++) {
  //           params.filters = filters[i]
  //           qry.setVars(params)
  			if(params.filter){
  				qry.setVars(params)
  			}
	        if (pagingKeys){
				qry.setPagingKeys(pagingKeys)
			}
			if (params._start != null){
				qry.setFirstResult( params._start )
				qry.setMaxResults(params._limit)
			}
		// }
		
		return qry.setParameters(params).singleResult 
	}

	@ProxyMethod
	public def subayhierarchyutil(o) {
		def profiles = emhrmis.sqlContext.createQuery('''
			SELECT objid FROM xxxmigratedprofile
		''').resultList;

		return "DONE"
	}
	

	@ProxyMethod
	public def hierarchyutil(o) {
		//def root = emcommon.findroot([tablename:o.tablename]);
		emcommon.setlftrgttonull([tablename:o.tablename]);
		emcommon.initroot([tablename:o.tablename,parentid:o.parentid]);

		// def x = emcommon.getnodes([tablename:o.tablename,parentid:o.parentid])
		// x.each{
		// 	if (o.parentid.split("_").size() > 0){
		// 		println it[o.parentid.split("_")[0]][o.parentid.split("_")[1]]
		// 	}else{
		// 		println it[o.parentid]
		// 	}
		// }
		def nodes;

		while(nodes = emcommon.getnodes([tablename:o.tablename,parentid:o.parentid])){
			
			nodes.each{
				def parent
				if (o.parentid.split("_").size() > 0){
					parent = emcommon.findparent([tablename:o.tablename,tblprimarykey:o.primarykey,parentid:it[o.parentid.split("_")[0]][o.parentid.split("_")[1]]])
				}else{
					parent = emcommon.findparent([tablename:o.tablename,tblprimarykey:o.primarykey,parentid:it[o.parentid]])
				}
					
				if(parent){
					// println parent
					//emcommon.locktable([tablename:o.tablename])
					emcommon.changeParentRight([tablename:o.tablename,myLeft:parent.lft]);
					emcommon.changeParentLeft([tablename:o.tablename,myLeft:parent.lft]);

					emcommon.addChild([tablename:o.tablename,myLeft:parent.lft,tblprimarykey:o.primarykey,objid:it[o.primarykey]])
					//emcommon.unlocktable()
				}
			}
			
		}


		return "DONE"
	}
	
	@ProxyMethod
	public void AddNode(o,item) {
		def parent = emcommon.findparent([tablename:o.tablename,tblprimarykey:o.primarykey,parentid:item[o.parentid]]);
		if(parent){
			//emcommon.locktable([tablename:o.tablename])
			emcommon.changeParentRight([tablename:o.tablename,myLeft:parent.lft]);
			emcommon.changeParentLeft([tablename:o.tablename,myLeft:parent.lft]);

			emcommon.addChild([tablename:o.tablename,myLeft:parent.lft,tblprimarykey:o.primarykey,objid:item[o.primarykey]])
			println item.name
			//emcommon.unlocktable()
		}
		
	}

	@ProxyMethod
	public def getNodesToInsert(o) {
		return emcommon.getnodes([tablename:o.tablename,parentid:o.parentid])
	}

	@ProxyMethod
	public void cleartable(o) {
		//def root = emcommon.findroot([tablename:o.tablename]);
		emcommon.setlftrgttonull([tablename:o.tablename]);
		emcommon.initroot([tablename:o.tablename,parentid:o.parentid]);
	}


}
