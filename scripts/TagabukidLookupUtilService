import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;

class TagabukidLookupUtilService
{

	@PersistenceContext('tagabukid_hrmis')
	def emhrmis

	@PersistenceContext('main')
	def emmain

	@Env
	def env;

	@Service('QueryService') 
	def querySvc; 
	
	@ActiveDB(value='tagabukidcommon', em='tagabukid_hrmis')
	def emcommon;

	@ProxyMethod
	public def lookuphrmis( namedsql, params, pagingKeys) {
		if (! params) params = [:]
		params.searchtext = (params.searchtext && params.searchtext.trim().length() > 0 ? params.searchtext : '') + '%'
		
		def qry = emhrmis.sqlContext.createNamedQuery(namedsql)
		
		if (pagingKeys){
			qry.setPagingKeys(pagingKeys)
		}
		if (params._start != null){
			qry.setFirstResult( params._start )
			qry.setMaxResults(params._limit)
		}
		def filter = [filter:params?.filter];
		return qry.setParameters(params).setVars(filter).resultList 
	}

	@ProxyMethod
	public def lookupmain( namedsql, params, pagingKeys) {
		if (! params) params = [:]
		params.searchtext = (params.searchtext && params.searchtext.trim().length() > 0 ? params.searchtext : '') + '%'

		def qry = emmain.sqlContext.createNamedQuery(namedsql)
		// for (int i = 0; i< filters.size(); i++) {
  //           params.filters = filters[i]
  //           qry.setVars(params)
  			if(params.filter){
  				qry.setVars(params)
  			}
	        if (pagingKeys){
				qry.setPagingKeys(pagingKeys)
			}
			if (params._start != null){
				qry.setFirstResult( params._start )
				qry.setMaxResults(params._limit)
			}
		// }
		
		return qry.setParameters(params).resultList 
	}

		@ProxyMethod
	public def lookupmainsingle( namedsql, params, pagingKeys) {
		if (! params) params = [:]
		params.searchtext = (params.searchtext && params.searchtext.trim().length() > 0 ? params.searchtext : '') + '%'

		def qry = emmain.sqlContext.createNamedQuery(namedsql)
		// for (int i = 0; i< filters.size(); i++) {
  //           params.filters = filters[i]
  //           qry.setVars(params)
  			if(params.filter){
  				qry.setVars(params)
  			}
	        if (pagingKeys){
				qry.setPagingKeys(pagingKeys)
			}
			if (params._start != null){
				qry.setFirstResult( params._start )
				qry.setMaxResults(params._limit)
			}
		// }
		
		return qry.setParameters(params).singleResult 
	}


	@ProxyMethod
	public def hirarchyutil(o) {
		//def root = emcommon.findroot([tablename:o.tablename]);
		//emcommon.initroot([tablename:o.tablename]);

		def nodes = emcommon.getnodes([tablename:o.tablename])

		nodes.each{
			def parent = emcommon.findparent([tablename:o.tablename,parentid:it.parentid]);

			//emcommon.locktable([tablename:o.tablename])
			emcommon.changeParentRight([tablename:o.tablename,myLeft:parent.lft]);
			emcommon.changeParentLeft([tablename:o.tablename,myLeft:parent.lft]);

			emcommon.addChild([tablename:o.tablename,myLeft:parent.lft,objid:it.objid])
			//emcommon.unlocktable()
		}


		return "DONE"
	}


}
